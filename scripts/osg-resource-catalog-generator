#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
osg-resource-catalog-generator

Standalone script to generate a condor config file for advertising a resource
to the CE Collector.
"""

from argparse import ArgumentParser, Namespace
from configparser import ConfigParser
import glob
import os
import sys
from typing import Dict, List

if __name__ == "__main__" and __package__ is None:
    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# local imports here
from osg_configure.modules.baseconfiguration import BATCH_SYSTEMS
from osg_configure.modules.exceptions import Error
from osg_configure.modules import subcluster
from osg_configure.modules import utilities
from osg_configure.version import __version__


def warn(*args, **kwargs):
    kwargs['file'] = sys.stderr
    print("***", *args, **kwargs)


def load_configs(config_locations: List[str]) -> ConfigParser:
    config_file_list = []
    read_stdin = False
    for config_location in config_locations:
        if config_location == "-":
            read_stdin = True
        elif os.path.isdir(config_location):
            config_file_list.extend(sorted(glob.glob(os.path.join(config_location, "[!.]*.ini"))))
        else:
            config_file_list.append(config_location)

    config = ConfigParser()

    read_files = config.read(config_file_list)
    if not read_files and not read_stdin:
        raise Error(f"No valid config files found in {', '.join(config_locations)}")
    if read_stdin:
        config.read_string(sys.stdin.read(), "<stdin>")

    return config


def get_attributes(config: ConfigParser, options: Namespace) -> Dict[str, str]:
    """Turn config from .ini files  and command-line options into a dict of condor settings.

    Takes care of OSG_BatchSystems, OSG_Resource, and OSG_ResourceGroup.
    OSG_ResourceCatalog is handled in the osg_configure.modules.subcluster module.
    """
    attributes = {}

    batch_systems = []
    if options.batch_systems is not None:
        for batch_system in filter(None, options.batch_systems.split(",")):
            if batch_system not in BATCH_SYSTEMS:
                raise Error("Unrecognized batch system %s" % batch_system)
            else:
                batch_systems.append(batch_system)
    else:
        for batch_system in BATCH_SYSTEMS:
            if batch_system in config:
                if config.getboolean(section=batch_system, option="enabled", fallback=None):
                    batch_systems.append(batch_system)

    if batch_systems:
        attributes["OSG_BatchSystems"] = utilities.classad_quote(",".join(batch_systems))
    else:
        warn("No enabled batch systems.")
        warn("Add be a section named after one of the following batch systems: " +
             ", ".join(BATCH_SYSTEMS))
        warn('with "Enabled = True"')
        warn("Or, specify a list with --batch-systems on the command line.")

    resource = ""
    resource_group = ""

    if options.resource is not None:
        resource = options.resource
    elif "Site Information" in config:
        resource = config.get("Site Information", "resource", fallback="").strip()
        if utilities.blank(resource):
            resource = ""

    if options.resource_group is not None:
        resource_group = options.resource_group
    elif "Site Information" in config:
        resource_group = config.get("Site Information", "resource_group", fallback="").strip()
        if utilities.blank(resource_group):
            resource_group = ""

    if resource:
        attributes["OSG_Resource"] = utilities.classad_quote(resource)
    else:
        raise Error("--resource or Site Information.resource not specified or empty")

    if resource_group:
        attributes["OSG_ResourceGroup"] = utilities.classad_quote(resource_group)
    else:
        raise Error("--resource-group or Site Information.resource_group not specified or empty")

    return attributes


def get_options(args):
    "Parse, validate, and transform command-line options."
    parser = ArgumentParser(prog="osg-resource-catalog-generator", description=__doc__)
    parser.add_argument('--version', action='version', version='%(prog)s ' + __version__)
    parser.add_argument(
        "-c",
        "--config",
        action="append",
        metavar="FILE_OR_DIRECTORY",
        help="Where to load configuration from; can be specified multiple times. "
        "If this is a directory, will load every *.ini file in that directory. "
        "If not specified, /etc/osg/config.d is used. "
        "If '-', will read from stdin. stdin will always be read last.",
    )
    parser.add_argument(
        "-o",
        "--output",
        metavar="FILE",
        help="Write output to this file instead of stdout.",
    )
    parser.add_argument(
        "--resource",
        metavar="RESOURCE_NAME",
        default=None,
        help="The Resource name to use, which should match your Topology registration. "
        "Overrides the config file(s)."
    )
    parser.add_argument(
        "--resource-group",
        metavar="RESOURCE_GROUP_NAME",
        default=None,
        help="The Resource Group name to use, which should match your Topology registration. "
        "Overrides the config file(s)."
    )
    parser.add_argument(
        "--batch-systems",
        metavar="BATCH_SYSTEMS_LIST",
        default=None,
        help="A comma-separated list of batch systems used by the resource. "
        "Recognized batch systems are: %s. "
        "Overrides the config file(s)." % ", ".join(BATCH_SYSTEMS)
    )

    return parser.parse_args(args)


def main(argv):
    options = get_options(argv[1:])

    try:
        if not options.config:
            options.config = ["/etc/osg/config.d"]
        config = load_configs(options.config)
        attributes = get_attributes(config, options)
        attributes_str = "\n".join(f"{key} = {value}" for key, value in attributes.items())
        resource_catalog_str = subcluster.resource_catalog_from_config(config, default_allowed_vos=[]).compose_text()
        schedd_attrs_str = "SCHEDD_ATTRS = OSG_ResourceCatalog, " + ", ".join(attributes.keys())

        output_str = "\n".join([attributes_str, resource_catalog_str, schedd_attrs_str])

        if options.output:
            with open(options.output, "w") as outfh:
                print(output_str, file=outfh)
        else:
            print(output_str)
    except Error as e:
        print(e, file=sys.stderr)
        return 1

    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv))
